Steps to get working: (macosx, might be easier on linux)
- pullproducts to get larsoftobj (version 08.01.01 onward to get the right gallery)
- manually pull correct version of uboonedaq_datatypes and larlite. May also need explicit sqlite
- cd backend
- source setup.sh (need to edit script to get right stuff)
- make (to build libargo)

- cd node3/argo
Two ways forward:
1. Start with a fresh environment (unsetup everything) and do node-gyp rebuild
or node-gyp isntall
or from /node just do npm install
2. Keep contaminated environment.  
   - on osx needed to explicitly 'setup sqlite v<whatever'
   - unsetup python (OSX is a pain in the butt)
   - export CXX=clang
    npm install OR node-gyp rebuild as above

- cd to node3
- make sure environment set up with complete paths
node main.js

Interestingly!f
Just DYLD_LIBRARY_PATH seems to be required! There are LOTS of error messages, and job no longer obeys quit signals... but it works!
Even those problems go away if you put $CLANG_FQ_DIR/bin into your $PATH!
Nice for rapid startup, otherwise probably not worth the effort.

Ideas to simplify:
- pullproducts into dedicated install area
OR
- install my stuff into dedicated install area.  Might make sense!

- It's possible that node-gyp could run Make in the backend directory, which would be nice.

