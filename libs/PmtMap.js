//
// Code for the Arachne Event Display
// Author: Nathaniel Tagg ntagg@otterbein.edu
// 
// Licence: this code is free for non-commertial use. Note other licences may apply to 3rd-party code.
// Any use of this code must include attribution to Nathaniel Tagg at Otterbein University, but otherwise 
// you're free to modify and use it as you like.
//

// Globals:

// Automatic runtime configuration.
// I should probably abstract this another level for a desktop-like build...
$(function(){
  $('div.A-PmtMap').each(function(){
    new PmtMap(this);
  });  
});

function OpDetGeo ()
{
  // This code generated by geometry looter. Run geoloot.fcl, and copy geo_opdet.json here.
  this.opticalDetectors = 
  [{"opdet":0,"chan":0,"x":-5.75,"y":3.22,"z":990.50},{"opdet":1,"chan":1,"x":-5.75,"y":59.10,"z":938.50},{"opdet":2,"chan":2,"x":-5.71,"y":-52.66,"z":938.50},{"opdet":3,"chan":3,"x":-5.75,"y":59.10,"z":898.50},{"opdet":4,"chan":4,"x":-5.71,"y":-52.66,"z":898.50},{"opdet":5,"chan":5,"x":-5.75,"y":3.22,"z":846.50},{"opdet":6,"chan":6,"x":-5.75,"y":3.22,"z":790.50},{"opdet":7,"chan":7,"x":-5.75,"y":59.10,"z":738.50},{"opdet":8,"chan":8,"x":-5.71,"y":-52.66,"z":738.50},{"opdet":9,"chan":9,"x":-5.75,"y":59.10,"z":698.50},{"opdet":10,"chan":10,"x":-5.71,"y":-52.66,"z":698.50},{"opdet":11,"chan":11,"x":-5.75,"y":3.22,"z":646.50},{"opdet":12,"chan":12,"x":-5.75,"y":3.22,"z":590.50},{"opdet":13,"chan":13,"x":-5.75,"y":59.10,"z":538.50},{"opdet":14,"chan":14,"x":-5.71,"y":-52.66,"z":538.50},{"opdet":15,"chan":15,"x":-5.75,"y":59.10,"z":498.50},{"opdet":16,"chan":16,"x":-5.71,"y":-52.66,"z":498.50},{"opdet":17,"chan":17,"x":-5.75,"y":3.22,"z":446.50},{"opdet":18,"chan":18,"x":-5.75,"y":3.22,"z":390.50},{"opdet":19,"chan":19,"x":-5.75,"y":59.10,"z":338.50},{"opdet":20,"chan":20,"x":-5.71,"y":-52.66,"z":338.50},{"opdet":21,"chan":21,"x":-5.75,"y":59.10,"z":298.50},{"opdet":22,"chan":22,"x":-5.71,"y":-52.66,"z":298.50},{"opdet":23,"chan":23,"x":-5.75,"y":3.22,"z":246.50},{"opdet":24,"chan":24,"x":-5.75,"y":3.22,"z":190.50},{"opdet":25,"chan":25,"x":-5.75,"y":59.10,"z":138.50},{"opdet":26,"chan":26,"x":-5.71,"y":-52.66,"z":138.50},{"opdet":27,"chan":27,"x":-5.75,"y":59.10,"z":98.50},{"opdet":28,"chan":28,"x":-5.71,"y":-52.66,"z":98.50},{"opdet":29,"chan":29,"x":-5.75,"y":3.22,"z":46.50}]


  this.opDetByChan = [];
  for(var i=0; i<this.opticalDetectors.length;i++) {
    // this.opticalDetectors[i].z-=30.;
    this.opDetByChan[this.opticalDetectors[i].chan] = this.opticalDetectors[i];
  }
  
  // function OpDetByChannel(chan){ return this.opDetByChan[chan]; }   
}

OpDetGeo.prototype.OpDetByChannel = function(chan)
{ return this.opDetByChan[chan]; }

OpDetGeo.prototype.n = function()
{ return this.opDetByChan.length; }


// Global.
var gOpDetGeo = new OpDetGeo();



// Subclass of HistCanvas.
PmtMap.prototype = new ButtressedPad(null);

function PmtMap( element, path, override_settings )
{
  if(element==null) return;
  var settings = {
    log_y:false
    ,buttress_min_u :   10 // cm
    ,buttress_max_u :  1060
    ,buttress_min_v :  -120
    ,buttress_max_v :   120
    ,main_height: "200px"
    ,main_width: "100%"    
  };
  $.extend(settings,override_settings);

  this.top_element = element;
  this.path = path;  
  $(this.top_element).append("<div class='title' />");
  $(this.top_element).append("<div class='pad main' />");
  this.main_element = $('div.main',this.top_element).get(0);
  $(this.main_element).css("height",settings.main_height);
  $(this.main_element).css("width",settings.main_width);
  this.element = this.main_element;
  ButtressedPad.call(this, this.main_element, settings); // Give settings to Pad contructor.

  // sub-pad.
  $(this.top_element).append("<div class='pad adjunct' />");
  this.adjunctpad = $('div.adjunct',this.top_element).get(0);
  $(this.adjunctpad).css("float","left");
  $(this.adjunctpad).css("height","150");
  $(this.adjunctpad).css("width","50%");
  
  // Buttons and things.
  var ctl = '\
  <div class="PmtMap-diffradio">\
    <label><input type="radio" value="value" name="pmt-map-radio1" checked="checked"/>Value</label>\
    <label><input type="radio" value="diff"  name="pmt-map-radio1"                  />Diff</label>\
  </div>\
  <div class="PmtMap-gainradio">\
    <label><input type="radio" value="1" name="pmt-map-radio2"                    />Low Gain</label>\
    <label><input type="radio" value="2"  name="pmt-map-radio2" checked="checked" />High Gain</label>\
  </div>\
  ';
  $(this.top_element).append(ctl);
  this.diff_radios = $('div.PmtMap-diffradio', this.top_element);
  this.gain_radios = $('div.PmtMap-gainradio', this.top_element);
  // console.warn($("input[value='value']",this.diff_radios));
  $(":radio",this.top_element).click(function(e){
    self.ChangeView();
  });
  // info.
  $(this.top_element).append("<div class='infopane' />");
  $(this.top_element).append("<div style='clear:both;' />");
  
  
  this.associate_hist = new HistCanvas(this.adjunctpad,{margin_left:50});
  
  
  this.hist = new Histogram;
  var self=this;
  // gStateMachine.BindObj('recordChange',this,"NewRecord");

  this.map = null;
  var self = this;  
  
  $(this.element).mousemove(this.DoMouse.bind(this));
  $(this.element).click(this.DoMouse.bind(this));
  this.SetMagnify();
  
  this.mynamespace= "mns" + this.gUniqueIdCounter;
  $(document).on("OmDataRecieved."+this.mynamespace, function(){return self.NewRecord()});  
  $(document).on("OmRefDataRecieved."+this.mynamespace, function(){return self.NewRecord()});  
  
  $(this.top_element).on("remove."+this.mynamespace, function(){return self.Remove()}); 
  
  gOmData.add(this.path); 
  gRefData.add(this.path); 
}

PmtMap.prototype.Remove = function()
{
  console.log("Removing ",this.path);
  gOmData.remove(this.path);
  $(document).off("OmDataRecieved."+this.mynamespace);
  $(document).off("OmRefDataRecieved."+this.mynamespace);
}


PmtMap.prototype.GetPmtIndex = function(pmt,gain)
{
  if(gain>1) return pmt+50;
  return pmt;
}


PmtMap.prototype.NewRecord = function()
{
  console.log("NewRecord");
  this.map   = gOmData.getObj(this.path); 
  if(!this.map)return;
  this.refmap= gRefData.getObj(this.path);

  $(".portlet-title",$(this.top_element).parent()).html(this.map.title);

  // $("div.title",this.top_element).html(this.map.title);

  // Need histogram _slightly_ bigger than max_content
  var contents = [];
  var min = 1e18;
  var max = -1e18;
  
  for(var gain=1;gain<=2;gain++) {
    for(var pmt=0;pmt<gOpDetGeo.n();pmt++) {
      var index = this.GetPmtIndex(pmt,gain);
      var val = this.map.data[index];
      contents.push(val);
      if(val<min) min = val;
      if(val>max) max = val;
    }
  }
  this.hist = CreateGoodHistogram(50,min,max);
  for(var i=0;i<contents.length;i++) this.hist.Fill(contents[i]);


  this.cs = new ColorScaler("RedBluePalette");
  this.cs.min = this.hist.min;
  this.cs.max = this.hist.max;
  
  if(this.refmap) {
    this.diff_hist = new Histogram(1000,-100,100);
    for(var gain=1;gain<=2;gain++) {
      for(var pmt=0;pmt<gOpDetGeo.n();pmt++) {
        var index = this.GetPmtIndex(pmt,gain);
        var x = this.map.data[index];
        var y = this.refmap.data[index];
        var ex = Math.sqrt(x);
        if(this.map.errs) ex = this.map.errs[index];
        var ey = Math.sqrt(y);
        if(this.refmap.errs) ey = this.refmap.errs[index];
        var diff = x-y;
        var denom = Math.sqrt(ex*ex+ey*ey);
        if(denom<=0) denom = 1;
        var ediff = diff/denom;
        this.diff_hist.Fill(ediff);
      }
    }
    
  }
  
  var self = this;
  
  this.associate_hist.FinishRangeChange = function(){self.Draw();}
  this.associate_hist.ChangeRange = function(minu,maxu){self.cs.min = minu; self.cs.max = maxu; HistCanvas.prototype.ChangeRange.call(this,minu,maxu);}
  this.ChangeView();
}





PmtMap.prototype.ChangeView = function()
{
  this.view_state = $(":checked",this.diff_radios).val();
  this.gain_state = parseInt($(":checked",this.gain_radios).val());
  // console.warn(this.view_state);
  
  this.associate_hist.SetLogy(false);
  if(this.view_state=='diff' && this.refmap) {
    this.associate_hist.xlabel = "(Current-Ref)/Sigma";
    this.associate_hist.ylabel = "Num Channels";
    this.associate_hist.min = this.diff_hist.min_x;
    this.associate_hist.max = this.diff_hist.max_x;
    this.associate_hist.SetHist(this.diff_hist,this.cs);
    this.associate_hist.ResetToHist(this.diff_hist); 
  } else {
    this.associate_hist.xlabel = this.map.ylabel || this.map.title;
    this.associate_hist.ylabel = "Num Channels";
    this.associate_hist.min = this.hist.min;
    this.associate_hist.max = this.hist.max;
    this.associate_hist.SetHist(this.hist,this.cs);
    this.associate_hist.ResetToHist(this.hist);     
  }
  this.cs.min = this.associate_hist.min;
  this.cs.max = this.associate_hist.max;
  
  this.Draw();
  this.associate_hist.Draw();
  
}


PmtMap.prototype.DrawOne = function(umin,umax,vmin,vmax)
{
  console.timeStamp("PmtMap.DrawOne()");
  console.log("Drawone");
  if(!this.map) return;

  this.do_diff = (this.view_state=='diff' && this.refmap);
  
  var drawbox = {u1:umin,u2:umax,v1:vmin,v2:vmax};
  this.pmtRadius = 15.2; // Size of the TPB Coating, according to the root geometry file.
  var r = this.pmtRadius * this.span_x/(this.max_u-this.min_u); // Radius in screen pixels.

  this.Clear();
  
  var gain_order = [ ((this.gain_state==1)?2:1) , this.gain_state ];
  
  for(var igain=0;igain<2;igain++) {
    var gain=gain_order[igain];
    for(var pmt=0;pmt<gOpDetGeo.n();pmt++) {

      var det = gOpDetGeo.OpDetByChannel(pmt);
      var w = this.map.data[this.GetPmtIndex(pmt,gain)];
      if(!det) { 
        console.warn("Couldn't find optical detector geometry for hit",oh);
        continue;
      }
      var u = det.z;
      var v = det.y;
      if(gain==1) { u+= 15; v-=15;}
      
      var x = this.GetX(u);
      var y = this.GetY(v);

      var c = this.cs.GetColor(w);
      if(igain==0) {
        this.ctx.fillStyle = "rgba(" + c + ",0.5)";
        this.ctx.strokeStyle = "gray";
      } else {
        this.ctx.fillStyle = "rgb(" + c + ")";
        this.ctx.strokeStyle = "black";        
      }    
      
      if((gain == this.fMouseInGain)&&(pmt == this.fMouseInPmt)) {
         this.ctx.lineWidth = 2;
         this.ctx.strokeStyle = "black";        
      } else { 
        this.ctx.lineWidth = 1;
      } 

      this.ctx.beginPath();
      this.ctx.arc(x,y,r,0,Math.PI*1.999,false);
      this.ctx.fill();
      this.ctx.stroke();

      
      this.ctx.beginPath();
      this.ctx.arc(x,y,r,0,Math.PI*1.999,false);
    }
  }
  
  
  var txt = "";
  if(null!=this.fMouseInPmt) {
    txt += "PMT: " + this.fMouseInPmt + " ";
    txt += (this.fMouseInGain==1)?"Low gain":"High gain";
    txt += "<br/>";
    if(this.fMouseInPmt) txt += "Value: " + this.map.data[this.GetPmtIndex(this.fMouseInPmt,this.fMouseInGain)]  + "<br/>";
  }
  $(".infopane",this.top_element).html(txt);
  
   
  
  console.timeStamp("PmtMap.DrawOne() Finished");
  
  // this.DrawFrame();


  
}

PmtMap.prototype.DoMouse = function(ev)
{
  var offset = getAbsolutePosition(this.canvas);
  this.fMouseX = ev.pageX - offset.x;
  this.fMouseY = ev.pageY - offset.y;
  this.fMouseU = this.GetU(this.fMouseX);
  this.fMouseV = this.GetV(this.fMouseY);
  this.fMouseInPmt = null;

  var r2 = this.pmtRadius* this.pmtRadius;
  var dets = gOpDetGeo.opticalDetectors;
  var hoverdet = null;
  var gain_order = [ ((this.gain_state==1)?2:1) , this.gain_state ];
  
  for(var igain=0;igain<2;igain++) {
    var gain=gain_order[igain];
    for(var pmt=0;pmt<gOpDetGeo.n();pmt++) {
      var det = gOpDetGeo.OpDetByChannel(pmt);
      var u = det.z;
      var v = det.y;
      if(gain==1) { u+= 15; v-=15;}
      var dx = (u - this.fMouseU);
      var dy = (v - this.fMouseV);
      var d2 = dx*dx + dy*dy;
      if(d2<r2) {this.fMouseInGain = gain; this.fMouseInPmt = pmt;}
    }
  }
  if(ev.type === 'click' && this.fMouseInPmt) {
    // FIXME
    // need to associate to channel here. Not clear how.
    
    // var hash = "#tpc/crate"+this.fMouseInCrate;
    // if(null!=this.fMouseInCard) hash += "/card" + zeropad(this.fMouseInCard,2);
    // if(null!=this.fMouseInChannel) hash += "/chan" + zeropad(this.fMouseInChannel,2);
    // console.log("click newhash = ",hash);
    // window.location.hash = hash;
  }

}

