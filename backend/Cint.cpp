//
// File generated by rootcint at Wed Jul 17 14:26:54 2013

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME Cint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "Cint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::JsonElement JsonElement;
      #else
      class JsonElement  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~JsonElement() throw() {};
         ::basic_ostringstream< char, ::char_traits< char >, allocator< char >  > fContent; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::JsonObject JsonObject;
      #else
      class JsonObject  :  public ::JsonElement {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~JsonObject() throw() {};
         int fElements; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::JsonArray JsonArray;
      #else
      class JsonArray  :  public ::JsonElement {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~JsonArray() throw() {};
         int fElements; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::JsonFixed JsonFixed;
      #else
      class JsonFixed  :  public ::JsonElement {
         public:
         //friend XX;
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::JsonSigFig JsonSigFig;
      #else
      class JsonSigFig  :  public ::JsonElement {
         public:
         //friend XX;
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void JsonElement_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void JsonElement_Dictionary();
   static void *new_JsonElement(void *p = 0);
   static void *newArray_JsonElement(Long_t size, void *p);
   static void delete_JsonElement(void *p);
   static void deleteArray_JsonElement(void *p);
   static void destruct_JsonElement(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::JsonElement*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::JsonElement) == sizeof(::ROOT::Shadow::JsonElement));
      ::JsonElement *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::JsonElement),0);
      static ::ROOT::TGenericClassInfo 
         instance("JsonElement", "./JsonElement.h", 17,
                  typeid(::JsonElement), DefineBehavior(ptr, ptr),
                  &JsonElement_ShowMembers, &JsonElement_Dictionary, isa_proxy, 4,
                  sizeof(::JsonElement) );
      instance.SetNew(&new_JsonElement);
      instance.SetNewArray(&newArray_JsonElement);
      instance.SetDelete(&delete_JsonElement);
      instance.SetDeleteArray(&deleteArray_JsonElement);
      instance.SetDestructor(&destruct_JsonElement);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::JsonElement*)
   {
      return GenerateInitInstanceLocal((::JsonElement*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::JsonElement*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void JsonElement_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::JsonElement*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void JsonObject_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void JsonObject_Dictionary();
   static void *new_JsonObject(void *p = 0);
   static void *newArray_JsonObject(Long_t size, void *p);
   static void delete_JsonObject(void *p);
   static void deleteArray_JsonObject(void *p);
   static void destruct_JsonObject(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::JsonObject*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::JsonObject) == sizeof(::ROOT::Shadow::JsonObject));
      ::JsonObject *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::JsonObject),0);
      static ::ROOT::TGenericClassInfo 
         instance("JsonObject", "./JsonElement.h", 126,
                  typeid(::JsonObject), DefineBehavior(ptr, ptr),
                  &JsonObject_ShowMembers, &JsonObject_Dictionary, isa_proxy, 4,
                  sizeof(::JsonObject) );
      instance.SetNew(&new_JsonObject);
      instance.SetNewArray(&newArray_JsonObject);
      instance.SetDelete(&delete_JsonObject);
      instance.SetDeleteArray(&deleteArray_JsonObject);
      instance.SetDestructor(&destruct_JsonObject);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::JsonObject*)
   {
      return GenerateInitInstanceLocal((::JsonObject*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::JsonObject*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void JsonObject_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::JsonObject*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void JsonArray_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void JsonArray_Dictionary();
   static void *new_JsonArray(void *p = 0);
   static void *newArray_JsonArray(Long_t size, void *p);
   static void delete_JsonArray(void *p);
   static void deleteArray_JsonArray(void *p);
   static void destruct_JsonArray(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::JsonArray*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::JsonArray) == sizeof(::ROOT::Shadow::JsonArray));
      ::JsonArray *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::JsonArray),0);
      static ::ROOT::TGenericClassInfo 
         instance("JsonArray", "./JsonElement.h", 146,
                  typeid(::JsonArray), DefineBehavior(ptr, ptr),
                  &JsonArray_ShowMembers, &JsonArray_Dictionary, isa_proxy, 4,
                  sizeof(::JsonArray) );
      instance.SetNew(&new_JsonArray);
      instance.SetNewArray(&newArray_JsonArray);
      instance.SetDelete(&delete_JsonArray);
      instance.SetDeleteArray(&deleteArray_JsonArray);
      instance.SetDestructor(&destruct_JsonArray);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::JsonArray*)
   {
      return GenerateInitInstanceLocal((::JsonArray*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::JsonArray*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void JsonArray_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::JsonArray*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void JsonFixed_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void JsonFixed_Dictionary();
   static void delete_JsonFixed(void *p);
   static void deleteArray_JsonFixed(void *p);
   static void destruct_JsonFixed(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::JsonFixed*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::JsonFixed) == sizeof(::ROOT::Shadow::JsonFixed));
      ::JsonFixed *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::JsonFixed),0);
      static ::ROOT::TGenericClassInfo 
         instance("JsonFixed", "./JsonElement.h", 66,
                  typeid(::JsonFixed), DefineBehavior(ptr, ptr),
                  &JsonFixed_ShowMembers, &JsonFixed_Dictionary, isa_proxy, 4,
                  sizeof(::JsonFixed) );
      instance.SetDelete(&delete_JsonFixed);
      instance.SetDeleteArray(&deleteArray_JsonFixed);
      instance.SetDestructor(&destruct_JsonFixed);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::JsonFixed*)
   {
      return GenerateInitInstanceLocal((::JsonFixed*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::JsonFixed*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void JsonFixed_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::JsonFixed*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void JsonSigFig_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void JsonSigFig_Dictionary();
   static void delete_JsonSigFig(void *p);
   static void deleteArray_JsonSigFig(void *p);
   static void destruct_JsonSigFig(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::JsonSigFig*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::JsonSigFig) == sizeof(::ROOT::Shadow::JsonSigFig));
      ::JsonSigFig *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::JsonSigFig),0);
      static ::ROOT::TGenericClassInfo 
         instance("JsonSigFig", "./JsonElement.h", 106,
                  typeid(::JsonSigFig), DefineBehavior(ptr, ptr),
                  &JsonSigFig_ShowMembers, &JsonSigFig_Dictionary, isa_proxy, 4,
                  sizeof(::JsonSigFig) );
      instance.SetDelete(&delete_JsonSigFig);
      instance.SetDeleteArray(&deleteArray_JsonSigFig);
      instance.SetDestructor(&destruct_JsonSigFig);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::JsonSigFig*)
   {
      return GenerateInitInstanceLocal((::JsonSigFig*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::JsonSigFig*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void JsonSigFig_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::JsonSigFig*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void JsonElement_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class JsonElement.
      typedef ::ROOT::Shadow::JsonElement ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::JsonElement*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fContent", (void*)&sobj->fContent);
      R__insp.InspectMember("ostringstream", (void*)&sobj->fContent, "fContent.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_JsonElement(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::JsonElement : new ::JsonElement;
   }
   static void *newArray_JsonElement(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::JsonElement[nElements] : new ::JsonElement[nElements];
   }
   // Wrapper around operator delete
   static void delete_JsonElement(void *p) {
      delete ((::JsonElement*)p);
   }
   static void deleteArray_JsonElement(void *p) {
      delete [] ((::JsonElement*)p);
   }
   static void destruct_JsonElement(void *p) {
      typedef ::JsonElement current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::JsonElement

//______________________________________________________________________________
namespace ROOT {
   void JsonFixed_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class JsonFixed.
      typedef ::ROOT::Shadow::JsonFixed ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::JsonFixed*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.GenericShowMembers("JsonElement", ( ::JsonElement * )( (::JsonFixed*) obj ), false);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_JsonFixed(void *p) {
      delete ((::JsonFixed*)p);
   }
   static void deleteArray_JsonFixed(void *p) {
      delete [] ((::JsonFixed*)p);
   }
   static void destruct_JsonFixed(void *p) {
      typedef ::JsonFixed current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::JsonFixed

//______________________________________________________________________________
namespace ROOT {
   void JsonSigFig_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class JsonSigFig.
      typedef ::ROOT::Shadow::JsonSigFig ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::JsonSigFig*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.GenericShowMembers("JsonElement", ( ::JsonElement * )( (::JsonSigFig*) obj ), false);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_JsonSigFig(void *p) {
      delete ((::JsonSigFig*)p);
   }
   static void deleteArray_JsonSigFig(void *p) {
      delete [] ((::JsonSigFig*)p);
   }
   static void destruct_JsonSigFig(void *p) {
      typedef ::JsonSigFig current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::JsonSigFig

//______________________________________________________________________________
namespace ROOT {
   void JsonObject_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class JsonObject.
      typedef ::ROOT::Shadow::JsonObject ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::JsonObject*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fElements", &sobj->fElements);
      R__insp.GenericShowMembers("JsonElement", ( ::JsonElement * )( (::JsonObject*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_JsonObject(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::JsonObject : new ::JsonObject;
   }
   static void *newArray_JsonObject(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::JsonObject[nElements] : new ::JsonObject[nElements];
   }
   // Wrapper around operator delete
   static void delete_JsonObject(void *p) {
      delete ((::JsonObject*)p);
   }
   static void deleteArray_JsonObject(void *p) {
      delete [] ((::JsonObject*)p);
   }
   static void destruct_JsonObject(void *p) {
      typedef ::JsonObject current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::JsonObject

//______________________________________________________________________________
namespace ROOT {
   void JsonArray_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class JsonArray.
      typedef ::ROOT::Shadow::JsonArray ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::JsonArray*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fElements", &sobj->fElements);
      R__insp.GenericShowMembers("JsonElement", ( ::JsonElement * )( (::JsonArray*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_JsonArray(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::JsonArray : new ::JsonArray;
   }
   static void *newArray_JsonArray(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::JsonArray[nElements] : new ::JsonArray[nElements];
   }
   // Wrapper around operator delete
   static void delete_JsonArray(void *p) {
      delete ((::JsonArray*)p);
   }
   static void deleteArray_JsonArray(void *p) {
      delete [] ((::JsonArray*)p);
   }
   static void destruct_JsonArray(void *p) {
      typedef ::JsonArray current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::JsonArray

/********************************************************
* Cint.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableCint();

extern "C" void G__set_cpp_environmentCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("JsonElement.h");
  G__add_compiledheader("FormulaLooter.h");
  G__cpp_reset_tagtableCint();
}
#include <new>
extern "C" int G__cpp_dllrevCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* JsonElement */
static int G__Cint_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JsonElement* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JsonElement[n];
     } else {
       p = new((void*) gvp) JsonElement[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JsonElement;
     } else {
       p = new((void*) gvp) JsonElement;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CintLN_JsonElement));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JsonElement* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new JsonElement(*(JsonElement*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) JsonElement(*(JsonElement*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CintLN_JsonElement));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((JsonElement*) G__getstructoffset())->operator=(*(JsonElement*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JsonElement* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new JsonElement(*(string*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) JsonElement(*(string*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CintLN_JsonElement));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JsonElement* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new JsonElement((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) JsonElement((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CintLN_JsonElement));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_168_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JsonElement* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new JsonElement((const unsigned int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) JsonElement((const unsigned int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CintLN_JsonElement));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_168_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JsonElement* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new JsonElement((const int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) JsonElement((const int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CintLN_JsonElement));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_168_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JsonElement* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new JsonElement((const long) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) JsonElement((const long) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CintLN_JsonElement));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_168_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JsonElement* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new JsonElement((const long long) G__Longlong(libp->para[0]));
   } else {
     p = new((void*) gvp) JsonElement((const long long) G__Longlong(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CintLN_JsonElement));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_168_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JsonElement* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JsonElement((const float) G__double(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) JsonElement((const float) G__double(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JsonElement((const float) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) JsonElement((const float) G__double(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CintLN_JsonElement));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_168_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JsonElement* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JsonElement((const double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) JsonElement((const double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JsonElement((const double) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) JsonElement((const double) G__double(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CintLN_JsonElement));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_168_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JsonElement* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new JsonElement((const bool) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) JsonElement((const bool) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CintLN_JsonElement));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_168_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const JsonElement*) G__getstructoffset())->str();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_168_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((JsonElement*) G__getstructoffset())->fixed();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_168_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((JsonElement*) G__getstructoffset())->setfixed();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_168_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((JsonElement*) G__getstructoffset())->fixed((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_168_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      JsonElement::SetPrettyPrint((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef JsonElement G__TJsonElement;
static int G__Cint_168_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (JsonElement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((JsonElement*) (soff+(sizeof(JsonElement)*i)))->~G__TJsonElement();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (JsonElement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((JsonElement*) (soff))->~G__TJsonElement();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* JsonObject */
static int G__Cint_169_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JsonObject* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JsonObject[n];
     } else {
       p = new((void*) gvp) JsonObject[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JsonObject;
     } else {
       p = new((void*) gvp) JsonObject;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CintLN_JsonObject));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_169_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JsonObject* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new JsonObject(*(JsonObject*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) JsonObject(*(JsonObject*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CintLN_JsonObject));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_169_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((JsonObject*) G__getstructoffset())->operator=(*(JsonObject*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_169_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const JsonObject& obj = ((JsonObject*) G__getstructoffset())->add(*(string*) libp->para[0].ref, *(JsonElement*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_169_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const JsonObject& obj = ((JsonObject*) G__getstructoffset())->add(*(string*) libp->para[0].ref, *(JsonArray*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_169_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const JsonObject& obj = ((JsonObject*) G__getstructoffset())->addBare(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef JsonObject G__TJsonObject;
static int G__Cint_169_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (JsonObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((JsonObject*) (soff+(sizeof(JsonObject)*i)))->~G__TJsonObject();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (JsonObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((JsonObject*) (soff))->~G__TJsonObject();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* JsonArray */
static int G__Cint_170_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JsonArray* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JsonArray[n];
     } else {
       p = new((void*) gvp) JsonArray[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JsonArray;
     } else {
       p = new((void*) gvp) JsonArray;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CintLN_JsonArray));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JsonArray* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new JsonArray(*(JsonArray*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) JsonArray(*(JsonArray*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CintLN_JsonArray));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const JsonArray& obj = ((JsonArray*) G__getstructoffset())->add(*(JsonObject*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const JsonArray& obj = ((JsonArray*) G__getstructoffset())->add(*(JsonElement*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint_170_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const JsonArray*) G__getstructoffset())->length());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef JsonArray G__TJsonArray;
static int G__Cint_170_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (JsonArray*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((JsonArray*) (soff+(sizeof(JsonArray)*i)))->~G__TJsonArray();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (JsonArray*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((JsonArray*) (soff))->~G__TJsonArray();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* JsonFixed */
static int G__Cint_171_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JsonFixed* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JsonFixed((const double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) JsonFixed((const double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JsonFixed((const double) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) JsonFixed((const double) G__double(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CintLN_JsonFixed));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef JsonFixed G__TJsonFixed;
static int G__Cint_171_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (JsonFixed*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((JsonFixed*) (soff+(sizeof(JsonFixed)*i)))->~G__TJsonFixed();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (JsonFixed*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((JsonFixed*) (soff))->~G__TJsonFixed();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* JsonSigFig */
static int G__Cint_172_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JsonSigFig* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JsonSigFig((const double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) JsonSigFig((const double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JsonSigFig((const double) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) JsonSigFig((const double) G__double(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CintLN_JsonSigFig));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef JsonSigFig G__TJsonSigFig;
static int G__Cint_172_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (JsonSigFig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((JsonSigFig*) (soff+(sizeof(JsonSigFig)*i)))->~G__TJsonSigFig();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (JsonSigFig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((JsonSigFig*) (soff))->~G__TJsonSigFig();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */
static int G__Cint__0_1298(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         JsonElement* pobj;
         JsonElement xobj = FormulaMakeElement((TTree*) G__int(libp->para[0]), *(string*) libp->para[1].ref);
         pobj = new JsonElement(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint__0_1367(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         JsonArray* pobj;
         JsonArray xobj = FormulaMakeArray((TTree*) G__int(libp->para[0]), *(vector<std::pair<std::string,std::string> >*) libp->para[1].ref);
         pobj = new JsonArray(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Cint__0_1368(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         JsonArray* pobj;
         JsonArray xobj = test_fma((TTree*) G__int(libp->para[0]));
         pobj = new JsonArray(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}


/*********************************************************
* Member function Stub
*********************************************************/

/* JsonElement */

/* JsonObject */

/* JsonArray */

/* JsonFixed */

/* JsonSigFig */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncCint {
 public:
  G__Sizep2memfuncCint(): p(&G__Sizep2memfuncCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncCint::*p)();
};

size_t G__get_sizep2memfuncCint()
{
  G__Sizep2memfuncCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CintLN_JsonObject))) {
     JsonObject *G__Lderived;
     G__Lderived=(JsonObject*)0x1000;
     {
       JsonElement *G__Lpbase=(JsonElement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CintLN_JsonObject),G__get_linked_tagnum(&G__CintLN_JsonElement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CintLN_JsonArray))) {
     JsonArray *G__Lderived;
     G__Lderived=(JsonArray*)0x1000;
     {
       JsonElement *G__Lpbase=(JsonElement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CintLN_JsonArray),G__get_linked_tagnum(&G__CintLN_JsonElement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CintLN_JsonFixed))) {
     JsonFixed *G__Lderived;
     G__Lderived=(JsonFixed*)0x1000;
     {
       JsonElement *G__Lpbase=(JsonElement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CintLN_JsonFixed),G__get_linked_tagnum(&G__CintLN_JsonElement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CintLN_JsonSigFig))) {
     JsonSigFig *G__Lderived;
     G__Lderived=(JsonSigFig*)0x1000;
     {
       JsonElement *G__Lpbase=(JsonElement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CintLN_JsonSigFig),G__get_linked_tagnum(&G__CintLN_JsonElement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableCint() {

   /* Setting up typedef entry */
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__CintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__CintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<std::string,std::string>",117,G__get_linked_tagnum(&G__CintLN_pairlEstringcOstringgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<string,std::string>",117,G__get_linked_tagnum(&G__CintLN_pairlEstringcOstringgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<std::string,std::string> >",117,G__get_linked_tagnum(&G__CintLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<string,std::string> >",117,G__get_linked_tagnum(&G__CintLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CintLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CintLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CintLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CintLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<string,string> >",117,G__get_linked_tagnum(&G__CintLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* JsonElement */
static void G__setup_memvarJsonElement(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CintLN_JsonElement));
   { JsonElement *p; p=(JsonElement*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,1,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)(&JsonElement::sfDecimals),105,0,0,-1,-1,-2,1,"sfDecimals=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-2,2,"sfPrettyPrint=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CintLN_basic_ostringstreamlEcharcOchar_traitslEchargRcOallocatorlEchargRsPgR),G__defined_typename("ostringstream"),-1,2,"fContent=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* JsonObject */
static void G__setup_memvarJsonObject(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CintLN_JsonObject));
   { JsonObject *p; p=(JsonObject*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"fElements=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* JsonArray */
static void G__setup_memvarJsonArray(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CintLN_JsonArray));
   { JsonArray *p; p=(JsonArray*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"fElements=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* JsonFixed */
static void G__setup_memvarJsonFixed(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CintLN_JsonFixed));
   { JsonFixed *p; p=(JsonFixed*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* JsonSigFig */
static void G__setup_memvarJsonSigFig(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CintLN_JsonSigFig));
   { JsonSigFig *p; p=(JsonSigFig*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncJsonElement(void) {
   /* JsonElement */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CintLN_JsonElement));
   G__memfunc_setup("JsonElement",1124,G__Cint_168_0_1, 105, G__get_linked_tagnum(&G__CintLN_JsonElement), -1, 0, 0, 1, 1, 0, "", "Null element.", (void*) NULL, 0);
   G__memfunc_setup("JsonElement",1124,G__Cint_168_0_2, 105, G__get_linked_tagnum(&G__CintLN_JsonElement), -1, 0, 1, 1, 1, 0, "u 'JsonElement' - 11 - c", "Copy constructor.", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__Cint_168_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'JsonElement' - 11 - c", "Copy constructor.", (void*) NULL, 0);
   G__memfunc_setup("JsonElement",1124,G__Cint_168_0_4, 105, G__get_linked_tagnum(&G__CintLN_JsonElement), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("JsonElement",1124,G__Cint_168_0_5, 105, G__get_linked_tagnum(&G__CintLN_JsonElement), -1, 0, 1, 1, 1, 0, "C - - 10 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("JsonElement",1124,G__Cint_168_0_6, 105, G__get_linked_tagnum(&G__CintLN_JsonElement), -1, 0, 1, 1, 1, 0, "h - - 10 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("JsonElement",1124,G__Cint_168_0_7, 105, G__get_linked_tagnum(&G__CintLN_JsonElement), -1, 0, 1, 1, 1, 0, "i - - 10 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("JsonElement",1124,G__Cint_168_0_8, 105, G__get_linked_tagnum(&G__CintLN_JsonElement), -1, 0, 1, 1, 1, 0, "l - - 10 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("JsonElement",1124,G__Cint_168_0_9, 105, G__get_linked_tagnum(&G__CintLN_JsonElement), -1, 0, 1, 1, 1, 0, "n - - 10 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("JsonElement",1124,G__Cint_168_0_10, 105, G__get_linked_tagnum(&G__CintLN_JsonElement), -1, 0, 2, 1, 1, 0, 
"f - - 10 - value i - - 0 '-999' prec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("JsonElement",1124,G__Cint_168_0_11, 105, G__get_linked_tagnum(&G__CintLN_JsonElement), -1, 0, 2, 1, 1, 0, 
"d - - 10 - value i - - 0 '-999' prec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("JsonElement",1124,G__Cint_168_0_12, 105, G__get_linked_tagnum(&G__CintLN_JsonElement), -1, 0, 1, 1, 1, 0, "g - - 10 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("str",345,G__Cint_168_0_13, 117, G__get_linked_tagnum(&G__CintLN_string), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fixed",528,G__Cint_168_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setfixed",860,G__Cint_168_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fixed",528,G__Cint_168_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - decimals", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPrettyPrint",1473,G__Cint_168_0_17, 121, -1, -1, 0, 1, 3, 1, 0, "g - - 0 - onf", (char*)NULL, (void*) G__func2void( (void (*)(bool))(&JsonElement::SetPrettyPrint) ), 0);
   G__memfunc_setup("quotestring",1221,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CintLN_string), -1, 0, 1, 1, 2, 1, "u 'string' - 11 - s", (char*)NULL, (void*) NULL, 1);
   // automatic destructor
   G__memfunc_setup("~JsonElement", 1250, G__Cint_168_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncJsonObject(void) {
   /* JsonObject */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CintLN_JsonObject));
   G__memfunc_setup("JsonObject",1009,G__Cint_169_0_1, 105, G__get_linked_tagnum(&G__CintLN_JsonObject), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("JsonObject",1009,G__Cint_169_0_2, 105, G__get_linked_tagnum(&G__CintLN_JsonObject), -1, 0, 1, 1, 1, 0, "u 'JsonObject' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__Cint_169_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'JsonObject' - 11 - c", "Copy constructor.", (void*) NULL, 0);
   G__memfunc_setup("add",297,G__Cint_169_0_4, 117, G__get_linked_tagnum(&G__CintLN_JsonObject), -1, 1, 2, 1, 1, 0, 
"u 'string' - 11 - key u 'JsonElement' - 11 - value", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("add",297,G__Cint_169_0_5, 117, G__get_linked_tagnum(&G__CintLN_JsonObject), -1, 1, 2, 1, 1, 0, 
"u 'string' - 11 - key u 'JsonArray' - 11 - value", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("addBare",675,G__Cint_169_0_6, 117, G__get_linked_tagnum(&G__CintLN_JsonObject), -1, 1, 2, 1, 1, 0, 
"u 'string' - 11 - key u 'string' - 11 - value", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("str",345,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__CintLN_string), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   // automatic destructor
   G__memfunc_setup("~JsonObject", 1135, G__Cint_169_0_8, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncJsonArray(void) {
   /* JsonArray */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CintLN_JsonArray));
   G__memfunc_setup("JsonArray",921,G__Cint_170_0_1, 105, G__get_linked_tagnum(&G__CintLN_JsonArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("JsonArray",921,G__Cint_170_0_2, 105, G__get_linked_tagnum(&G__CintLN_JsonArray), -1, 0, 1, 1, 1, 0, "u 'JsonArray' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add",297,G__Cint_170_0_3, 117, G__get_linked_tagnum(&G__CintLN_JsonArray), -1, 1, 1, 1, 1, 0, "u 'JsonObject' - 11 - value", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("add",297,G__Cint_170_0_4, 117, G__get_linked_tagnum(&G__CintLN_JsonArray), -1, 1, 1, 1, 1, 0, "u 'JsonElement' - 11 - value", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("length",642,G__Cint_170_0_5, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("str",345,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__CintLN_string), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   // automatic destructor
   G__memfunc_setup("~JsonArray", 1047, G__Cint_170_0_7, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncJsonFixed(void) {
   /* JsonFixed */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CintLN_JsonFixed));
   G__memfunc_setup("JsonFixed",906,G__Cint_171_0_1, 105, G__get_linked_tagnum(&G__CintLN_JsonFixed), -1, 0, 2, 1, 1, 0, 
"d - - 10 - value i - - 0 '-999' prec", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~JsonFixed", 1032, G__Cint_171_0_2, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncJsonSigFig(void) {
   /* JsonSigFig */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CintLN_JsonSigFig));
   G__memfunc_setup("JsonSigFig",979,G__Cint_172_0_1, 105, G__get_linked_tagnum(&G__CintLN_JsonSigFig), -1, 0, 2, 1, 1, 0, 
"d - - 10 - value i - - 0 '3' S", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~JsonSigFig", 1105, G__Cint_172_0_2, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
   G__memfunc_setup("FormulaMakeElement", 1822, G__Cint__0_1298, 117, G__get_linked_tagnum(&G__CintLN_JsonElement), -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree u 'string' - 11 - formula", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func13() {
   G__memfunc_setup("FormulaMakeArray", 1619, G__Cint__0_1367, 117, G__get_linked_tagnum(&G__CintLN_JsonArray), -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree u 'vector<pair<string,string>,allocator<pair<string,string> > >' 'vector<std::pair<std::string,std::string> >' 11 - key_formula_pairs", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("test_fma", 851, G__Cint__0_1368, 117, G__get_linked_tagnum(&G__CintLN_JsonArray), -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*) NULL
, (void*) NULL, 0);

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__CintLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__CintLN_basic_ostringstreamlEcharcOchar_traitslEchargRcOallocatorlEchargRsPgR = { "basic_ostringstream<char,char_traits<char>,allocator<char> >" , 99 , -1 };
G__linked_taginfo G__CintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__CintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__CintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CintLN_JsonElement = { "JsonElement" , 99 , -1 };
G__linked_taginfo G__CintLN_JsonObject = { "JsonObject" , 99 , -1 };
G__linked_taginfo G__CintLN_JsonArray = { "JsonArray" , 99 , -1 };
G__linked_taginfo G__CintLN_JsonFixed = { "JsonFixed" , 99 , -1 };
G__linked_taginfo G__CintLN_JsonSigFig = { "JsonSigFig" , 99 , -1 };
G__linked_taginfo G__CintLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__CintLN_pairlEstringcOstringgR = { "pair<string,string>" , 115 , -1 };
G__linked_taginfo G__CintLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR = { "vector<pair<string,string>,allocator<pair<string,string> > >" , 99 , -1 };
G__linked_taginfo G__CintLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<string,string>,allocator<pair<string,string> > >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableCint() {
  G__CintLN_string.tagnum = -1 ;
  G__CintLN_basic_ostringstreamlEcharcOchar_traitslEchargRcOallocatorlEchargRsPgR.tagnum = -1 ;
  G__CintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__CintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__CintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CintLN_JsonElement.tagnum = -1 ;
  G__CintLN_JsonObject.tagnum = -1 ;
  G__CintLN_JsonArray.tagnum = -1 ;
  G__CintLN_JsonFixed.tagnum = -1 ;
  G__CintLN_JsonSigFig.tagnum = -1 ;
  G__CintLN_TTree.tagnum = -1 ;
  G__CintLN_pairlEstringcOstringgR.tagnum = -1 ;
  G__CintLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR.tagnum = -1 ;
  G__CintLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__CintLN_string);
   G__get_linked_tagnum_fwd(&G__CintLN_basic_ostringstreamlEcharcOchar_traitslEchargRcOallocatorlEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__CintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__CintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__CintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CintLN_JsonElement),sizeof(JsonElement),-1,297728,(char*)NULL,G__setup_memvarJsonElement,G__setup_memfuncJsonElement);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CintLN_JsonObject),sizeof(JsonObject),-1,297728,(char*)NULL,G__setup_memvarJsonObject,G__setup_memfuncJsonObject);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CintLN_JsonArray),sizeof(JsonArray),-1,295680,(char*)NULL,G__setup_memvarJsonArray,G__setup_memfuncJsonArray);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CintLN_JsonFixed),sizeof(JsonFixed),-1,294912,(char*)NULL,G__setup_memvarJsonFixed,G__setup_memfuncJsonFixed);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CintLN_JsonSigFig),sizeof(JsonSigFig),-1,294912,(char*)NULL,G__setup_memvarJsonSigFig,G__setup_memfuncJsonSigFig);
   G__get_linked_tagnum_fwd(&G__CintLN_TTree);
   G__get_linked_tagnum_fwd(&G__CintLN_pairlEstringcOstringgR);
   G__get_linked_tagnum_fwd(&G__CintLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__CintLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupCint()");
  G__set_cpp_environmentCint();
  G__cpp_setup_tagtableCint();

  G__cpp_setup_inheritanceCint();

  G__cpp_setup_typetableCint();

  G__cpp_setup_memvarCint();

  G__cpp_setup_memfuncCint();
  G__cpp_setup_globalCint();
  G__cpp_setup_funcCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncCint();
  return;
}
class G__cpp_setup_initCint {
  public:
    G__cpp_setup_initCint() { G__add_setup_func("Cint",(G__incsetup)(&G__cpp_setupCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initCint() { G__remove_setup_func("Cint"); }
};
G__cpp_setup_initCint G__cpp_setup_initializerCint;

