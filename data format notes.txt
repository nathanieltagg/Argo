Notes and questions on data format:

How does one know what the readout window bounds are, besides counting samples in the Wire objects?

Are sub-event times to be calibrated?  If so, how would one go from sample number to sample time?

Would it be reasonable to add WireID info to the calibrated reco::Wire objects?  Although unneeded for reconstruction, it would be handy for the viewer.
  If not, could we include a channel->WireID map in the output file? It could be it's own tree, a simple data object, or even an infile sqlite db.

Would it be reasonable to add ChannelID to reco::Hit and reco::Wire, instead of just a back-association to the raw channel?  Yes, it's redundant, but small.

Are the huffman and/or decimation algorithms established? If so, where could I find the algorithm?  (It would be handy if the viewer could decode files fresh from the DAQ!) On a related note, do we have any simulated "raw DAQ" files, so I can get a feel for contents?

Clusters seem to have their location info stored as two-element vectors:
StartPos:  ( wire, time )
EndPos:    ( wire, time )
etc.  This looks a little crazy, since judging from the code these vectors are always two entries long. Wouldn't it be far more transparent 
to simply declare a small struct:
  struct pos2d { double wire, double time };
This would make both the code more transparent, make the on-file data much easier to read, and be slightly more efficient for I/O and data storage.

What is the difference between SpacePoints_trackkalmanhit__Reco and Tracks_trackkalmanhit__Reco?  These objects seem similar.
(I'm guessing maybe the first one is before the Kalman filter is applied?)

How rich is the geometry data likely to be?  If the viewer assumes an algorithmic spacing of wires, is that going to be OK?
