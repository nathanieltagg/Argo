html
  head
    link(href='css/le-frog/jquery-ui.css', rel='stylesheet')
    link(href='css/le-frog/jquery.ui.theme.css', rel='stylesheet')
    script(src='js/jquery-1.9.0.js')
    script(src='js/jquery-ui-1.10.0.custom.js')
    // IE detection 
    script(type='text/javascript', src='js/modernizr.js')
    script(type='text/javascript', src='libs/check_browser.js')
    script(type='text/javascript', src='js/jquery.mousewheel.min.js')
    script(type='text/javascript', src='js/ajax-upload.3.5.js')
    script(type='text/javascript', src='js/jquery.cookie.js')
    script(type='text/javascript', src='js/jquery.blockUI.js')
    script(type='text/javascript', src='js/jquery.ba-resize.min.js')
    style
    script(type='text/javascript', charset='utf-8') $(function(){
    // see https://github.com/10gen-labs/sleepy.mongoose/wiki
    // for details.
    var new_rec = {blah:"full of eels"};
    var args = { func: "_insert"
               , db: "mydb"
               , col: "testData"
               , batch_size: 50
               , docs: JSON.stringify([new_rec])
             };
             var data = "docs="+JSON.stringify([new_rec]);
    $.ajax({url: 'scan/dreamy.cgi'
        , type:'POST'
        , dataType: "json"
        , data: args
        ,  success: function(response) { 
          console.log("insert:",response);
        }
        });
    
    
    // Custom call to my mongo interface.
    var criteria = {hovercraft:{"$exists":true}};
    var args = { func: "_find"
               , db: "mydb"
               , col: "testData"
               , batch_size: 50
               , criteria: JSON.stringify(criteria)
             };
    $.ajax({url: 'scan/dreamy.cgi'
        , type:'GET'
        ,  dataType: "json"
        , data: args
        ,  success: function(response) { 
          console.log(response);
        }
        });

    
    $('#goScanSubmit').click(function(){
      var data = {};
      var serial = $('form').serializeArray();
      for(var i=0;i<serial.length;i++) {
        var s = serial[i];
        var val = parseFloat(s.value)
        data[s.name] = isNaN(val)?s.value:val;
      };
      // Add unchecked checkboxes.
      $('form input:checkbox:not(:checked)').each(function(){
        data[this.name]=0;
      })
      
      var args = { func: "_insert"
                 , db: "mydb"
                 , col: "testData"
                 , batch_size: 50
                 , docs: JSON.stringify([data])
               };
     console.log("inserting ",data);
      $.ajax({url: 'scan/dreamy.cgi'
          , type:'POST'
          , dataType: "json"
          , data: args
          ,  success: function(response) { 
            console.log("insert:",response);
          }
          });
      
    })
  });
  body
    .portlet#scan-entry-port
      .portlet-header New Scan Entry
      #scan-entry.scan-input.portlet-content
        form#scan-form
          #scan-login-form(style='display:none')
            // this div usually hidden 
            p
              label User Name:
              br
              input.ui-state-default(type='text', name='inScanUserName', value='Anonymous Coward')
          #scan-logged-in
            input.ui-state-default.ui-corner-all(type='button', name='scan-change-login', value='Change Login')
            |  Logged in as:
            span#scan-logged-in-as Error!
          .collapsible-title Scan Form
          .collapsible
            span.scan-input Flags for Events:
            br
            input.ui-state-default.scan-input(type='checkbox', name='inScanCheckboxBit1', value='1')
            span.scan-input 1
            br
            input.ui-state-default.scan-input(type='checkbox', name='inScanCheckboxBit2', value='1')
            span.scan-input 2
            br
            input.ui-state-default.scan-input(type='checkbox', name='inScanCheckboxBit3', value='1')
            span.scan-input 3
            br
            input.ui-state-default.scan-input(type='checkbox', name='inScanCheckboxBit4', value='1')
            span.scan-input 4
            br
            input.ui-state-default.scan-input(type='checkbox', name='inScanCheckboxBit5', value='1')
            span.scan-input 5
            br
            select(name='inScan_VertexHits')
              option 0
              option 1
              option 2
              option 3
              option 4
              option 5
              option 6
              option 7
              option 8
              option 9
              option 10
            span.scan-input.scan-input-label Vertex Activity
            select(name='inScan_ShowerProngs')
              option 0
              option 1
              option 2
              option 3
              option 4
              option 5
              option 6
              option 7
              option 8
              option 9
              option 10
            span.scan-input.scan-input-label Shower Prongs
            select(name='inScan_TrackProngs')
              option 0
              option 1
              option 2
              option 3
              option 4
              option 5
              option 6
              option 7
              option 8
              option 9
              option 10
            span.scan-input.scan-input-label Track Prongs
            div
              span.scan-input Prong 1:
              span.scan-input
                input(type='radio', name='inScan_Prong1', value='0', checked='')
                | N/A
              |  
              span.scan-input
                input(type='radio', name='inScan_Prong1', value='1')
                | Exit HCAL rear
              |  
              span.scan-input
                input(type='radio', name='inScan_Prong1', value='2')
                | Exit HCAL side
              |  
              span.scan-input
                input(type='radio', name='inScan_Prong1', value='3')
                | Scatter
              |  
              span.scan-input
                input(type='radio', name='inScan_Prong1', value='4')
                | Shower
              |  
              span.scan-input
                input(type='radio', name='inScan_Prong1', value='5')
                | Range-stop
              |  
            div
              span.scan-input Prong 2:
              span.scan-input
                input(type='radio', name='inScan_Prong2', value='0', checked='')
                | N/A
              |  
              span.scan-input
                input(type='radio', name='inScan_Prong2', value='Exit HCAL rear')
                | Exit HCAL rear
              |  
              span.scan-input
                input(type='radio', name='inScan_Prong2', value='2')
                | Exit HCAL side
              |  
              span.scan-input
                input(type='radio', name='inScan_Prong2', value='3')
                | Scatter
              |  
              span.scan-input
                input(type='radio', name='inScan_Prong2', value='4')
                | Shower
              |  
              span.scan-input
                input(type='radio', name='inScan_Prong2', value='5')
                | Range-stop
              |  
            div
              span.scan-input Prong 3:
              span.scan-input
                input(type='radio', name='inScan_Prong3', value='0', checked='')
                | N/A
              |  
              span.scan-input
                input(type='radio', name='inScan_Prong3', value='1')
                | Exit HCAL rear
              |  
              span.scan-input
                input(type='radio', name='inScan_Prong3', value='2')
                | Exit HCAL side
              |  
              span.scan-input
                input(type='radio', name='inScan_Prong3', value='3')
                | Scatter
              |  
              span.scan-input
                input(type='radio', name='inScan_Prong3', value='4')
                | Shower
              |  
              span.scan-input
                input(type='radio', name='inScan_Prong3', value='5')
                | Range-stop
              |  
            select(name='inScan_GammaConversions')
              option 0
              option 1
              option 2
              option 3
              option 4
              option 5
              option 6
              option 7
              option 8
              option 9
              option 10
            span.scan-input.scan-input-label Gammas
            select(name='inScan_VeeVertices')
              option 0
              option 1
              option 2
              option 3
              option 4
              option 5
              option 6
              option 7
              option 8
              option 9
              option 10
            span.scan-input.scan-input-label
              | K
              sup 0
              | /Λ decays
            select(name='inScan_neutrons')
              option 0
              option 1
              option 2
              option 3
              option 4
              option 5
              option 6
              option 7
              option 8
              option 9
              option 10
            span.scan-input.scan-input-label Neutrons
          // collapsible 
          .collapsible-title(revealed='false') Notes:
          .collapsible
            textarea.ui-state-default.scan-input(rows='2', style='width: 98%', name='inScanNotes')
            br
          .collapsible-title(revealed='false') Manual Reconstruction:
          .collapsible
            .manreco-paths
            span.ui-button.ui-widget.ui-state-default.ui-button-text-only.ui-corner-all.manreco-add-vertex(name='manreco-add-vertex') New Vertex
            span.ui-button.ui-widget.ui-state-default.ui-button-text-only.ui-corner-all.manreco-add-track(name='manreco-add-track') New Track
            span.ui-button.ui-widget.ui-state-default.ui-button-text-only.ui-corner-all.manreco-undo(name='manreco-undo') Undo
            span.ui-button.ui-widget.ui-state-default.ui-button-text-only.ui-corner-all.manreco-redo(name='manreco-redo') Redo
            span.ui-button.ui-widget.ui-state-default.ui-button-text-only.ui-corner-all.manreco-showxml(name='manreco-showxml') Show Result XML
          input.ui-state-disabled.ui-corner-all(type='button', name='goScanSubmitAndAdvance', value='Submit And Advance')
          |  
          input.ui-state-default.ui-corner-all#goScanSubmit(type='button', value='Submit')
          .align-right
            input.ui-state-disabled.ui-corner-all(type='button', name='goScanReverse', value='Skip Back')
            |  
            input.ui-state-disabled.ui-corner-all(type='button', name='goScanAdvance', value='Skip Forward')
      // scan-entry 
    // portlet 
